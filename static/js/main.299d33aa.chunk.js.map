{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","helper.js","componentes/Resumen.js","componentes/Resultado.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","bind","assertThisInitialized","e","preventDefault","plan","current","checked","infoAuto","marca","value","year","onSubmit","name","ref","type","required","Component","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","_this$props$datos","datos","Resultado","resultado","mensaje","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","App","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","datosAuto","setState","state","componentes_Header","componentes_Formulario","componentes_Resumen","componentes_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAYeA,EAVA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UACKH,EAAMK,iBCiGRC,cA1FX,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAEDc,SAAWC,IAAMC,YACtBT,EAAKU,QAAUF,IAAMC,YACrBT,EAAKW,cAAgBH,IAAMC,YAC3BT,EAAKY,gBAAkBJ,IAAMC,YAC7BT,EAAKa,cAAgBb,EAAKa,cAAcC,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAPPA,6EAuBJgB,GACVA,EAAEC,iBAGF,IAAMC,EAAOf,KAAKQ,cAAcQ,QAAQC,QAAU,SAAW,WAMvDC,EAAW,CACbC,MAAQnB,KAAKI,SAASY,QAAQI,MAC9BC,KAAQrB,KAAKO,QAAQS,QAAQI,MAC7BL,KAAQA,GAOZf,KAAKV,MAAMoB,cAAcQ,oCAOzB,OACI3B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAe4B,SAAUtB,KAAKU,eAC1CnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,QAAQC,IAAKxB,KAAKI,UAC3Bb,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,aAAd,aACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,WAAd,WACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,YAAd,cAIR7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,OAAOC,IAAKxB,KAAKO,SAC1BhB,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,QACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,UAGR7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,QAAQF,KAAK,OAAOC,IAAKxB,KAAKQ,cAAeY,MAAM,SAASM,UAAQ,IAFpF,aAGInC,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,QAAQF,KAAK,OAAOC,IAAKxB,KAAKS,gBAAiBW,MAAM,aAHrE,aAMA7B,EAAAC,EAAAC,cAAA,UAAQgC,KAAK,SAAS/B,UAAU,SAAhC,mBA/FSiC,aC0BlB,SAASC,EAAiBC,GAC7B,OAAOA,EAAMC,OAAO,GAAGC,cAAgBF,EAAMG,MAAM,OCIxCC,6MA5BXC,eAAiB,WAAM,IAAAC,EAEStC,EAAKP,MAAM8C,MAAhCjB,EAFYgB,EAEZhB,MAAOE,EAFKc,EAELd,KAAMN,EAFDoB,EAECpB,KAEpB,OAAII,GAAUE,GAASN,EAGnBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBAAYmC,EAAiBT,IAC7B5B,EAAAC,EAAAC,cAAA,mBAAWmC,EAAiBb,IAC5BxB,EAAAC,EAAAC,cAAA,8BAAmB4B,KARK,8EAgBpC,OACI9B,EAAAC,EAAAC,cAAA,WACKO,KAAKkC,yBAxBAP,6BCuBPU,mLApBP,IAAMC,EAAYtC,KAAKV,MAAMgD,UACvBC,EAAYD,EAAmD,gBAAtC,uCAE/B,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACT6C,EACFhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAiBC,UAAU,OAAO/C,UAAU,aACxCH,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACIC,WAAW,YACXC,IAAKN,EACLO,QAAS,CAACC,MAAO,IAAKC,KAAM,MAE5BxD,EAAAC,EAAAC,cAAA,YAAO6C,aAfPX,aCoFTqB,cA9Eb,SAAAA,EAAY1D,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IAChBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMV,KAQRoB,cAAgB,SAAC0B,GAAU,IAClBjB,EAAqBiB,EAArBjB,MAAOE,EAAce,EAAdf,KAAMN,EAAQqB,EAARrB,KAIhBuB,EAAY,IAQhBA,GAAiC,EH/B9B,SAA+BjB,GAClC,OAAO,IAAI4B,MAAOC,cAAgB7B,EG0BV8B,CAAsB9B,GAIRiB,EAAa,IAInDA,EH/BG,SAAwBc,GAC3B,IAAIC,EAEJ,OAAQD,GACJ,IAAK,UACDC,EAAa,IACb,MACJ,IAAK,YACDA,EAAa,KACb,MACJ,IAAK,WACDA,EAAa,KAMrB,OAAOA,EGcKC,CAAcnC,GAASmB,EAInC,IAAIiB,EHfD,SAAsBxC,GACzB,MAAiB,WAATA,EAAqB,IAAO,IGcfyC,CAAYzC,GAIjCuB,EAAYmB,WAAWF,EAAiBjB,GAAWoB,QAAQ,GAI3D,IAAMC,EAAY,CAChBxC,MAAOA,EACPJ,KAAMA,EACNM,KAAMA,GAKRxB,EAAK+D,SAAS,CACZtB,UAAWA,EACXF,MAAOuB,KA9CT9D,EAAKgE,MAAQ,CACXvB,UAAW,GACXF,MAAO,IAJOvC,wEAsDhB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEbH,EAAAC,EAAAC,cAACqE,EAAD,CACEnE,OAAO,gCAGTJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACsE,EAAD,CACErD,cAAeV,KAAKU,gBAEtBnB,EAAAC,EAAAC,cAACuE,EAAD,CACE5B,MAAOpC,KAAK6D,MAAMzB,QAEpB7C,EAAAC,EAAAC,cAACwE,EAAD,CACI3B,UAAYtC,KAAK6D,MAAMvB,qBAvEnBX,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.299d33aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => {\n    return(\n        <header className=\"top\">\n            <h1>\n                {props.titulo}\n            </h1>\n        </header>\n    );\n}\n\nexport default Header;\n\n//no olvidar hacer el export defaul del component","import React, { Component } from 'react';\n\nclass Formulario extends Component {\n\n    // Los refs son para leer los valores de los campos de un formulario\n\n    // marcaRef = React.createRef(); // Esto es igual a crear un constructor\n    // yearRef = React.createRef();\n    // planBasicoRef = React.createRef();\n    // planCompletoRef = React.createRef();\n\n    // constructor\n\n    constructor(props){\n        super(props);\n\n        this.marcaRef = React.createRef();\n        this.yearRef = React.createRef();\n        this.planBasicoRef = React.createRef();\n        this.planCompletoRef = React.createRef();\n        this.cotizarSeguro = this.cotizarSeguro.bind(this);\n\n/*         this.cotizarSeguro = (e) => {\n            e.preventDefault();\n    \n            console.log(this.marcaRef.current.value);\n    \n            // Obtener datos\n    \n            // Crear objeto\n    \n            // Enviar data al componente\n        } */\n    }\n    \n\n    cotizarSeguro(e) {\n        e.preventDefault();\n\n        //leer el plan\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo'\n\n        // Obtener datos\n        // console.log(this.marcaRef.current.value);\n\n        // Crear objeto\n        const infoAuto = {\n            marca:  this.marcaRef.current.value,\n            year:   this.yearRef.current.value,\n            plan:   plan\n        }\n\n        // console.log(infoAuto);\n\n        // Enviar data al componente\n\n        this.props.cotizarSeguro(infoAuto);\n\n        // Resear formulario (opcional)\n        // e.currentTarget.reset();\n    }\n\n    render() {\n        return (\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\n                <div className=\"campo\">\n                    <label>Marca</label>\n                    <select name=\"marca\" ref={this.marcaRef}>\n                        <option value=\"americano\">Americano</option>\n                        <option value=\"europeo\">Europeo</option>\n                        <option value=\"asiatico\">Asiatico</option>\n                    </select>\n                </div>\n\n                <div className=\"campo\">\n                    <label>Año</label>\n                    <select name=\"year\" ref={this.yearRef}>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2018\">2018</option>\n                        <option value=\"2017\">2017</option>\n                        <option value=\"2016\">2016</option>\n                        <option value=\"2015\">2015</option>\n                        <option value=\"2014\">2014</option>\n                        <option value=\"2013\">2013</option>\n                        <option value=\"2012\">2012</option>\n                        <option value=\"2011\">2011</option>\n                        <option value=\"2010\">2010</option>\n                        <option value=\"2009\">2009</option>\n                        <option value=\"2008\">2008</option>\n                    </select>\n                </div>\n                <div className=\"campo\">\n                    <label>Plan:</label>\n                    <input type=\"radio\" name=\"plan\" ref={this.planBasicoRef} value=\"basico\" required/> Básico\n                    <input type=\"radio\" name=\"plan\" ref={this.planCompletoRef} value=\"completo\" /> Completo\n                </div>\n\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\n            </form>\n        );\n    }\n}\n\nexport default Formulario;","export function obtenerDiferenciaAnio(year) {\n    return new Date().getFullYear() - year;\n}\n \nexport function calcularMarca( modelo ) {\n    let incremento;\n\n    switch (modelo) {\n        case 'europeo':\n            incremento = 1.30;\n            break;\n        case 'americano':\n            incremento = 1.15;\n            break;\n        case 'asiatico':\n            incremento = 1.05;\n            break;\n        default:\n            break;\n    }\n\n    return incremento;\n}\n\nexport function obtenerPlan( plan ) {\n    return (plan === 'basico') ? 1.20 : 1.50;\n}\n\nexport function primeraMayuscula(texto) {\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\n}","import React, {Component} from 'react';\nimport {primeraMayuscula} from '../helper';\n\nclass Resumen extends Component{\n\n    mostrarResumen = () => {\n        \n        const {marca, year, plan} = this.props.datos;\n        \n        if(!marca || !year || !plan) return null;\n\n        return(\n            <div className=\"resumen\">\n                <h2>Resumen de Cotización</h2>\n                <ul>\n                    <li>Marca: {primeraMayuscula(marca)}</li>\n                    <li>Plan: {primeraMayuscula(plan)}</li>\n                    <li>Año del Auto: {year}</li>\n                </ul>\n            </div>\n        );\n\n    }\n\n    render(){\n        return(\n            <div>\n                {this.mostrarResumen()}\n            </div>\n        );\n    }\n}\n\nexport default Resumen;","import React, { Component } from 'react';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\n\nclass Resultado extends Component{\n    render(){\n\n        const resultado = this.props.resultado;\n        const mensaje = (!resultado) ? 'Elije Marca, Año y Tipo de Seguro' : 'El total es $';\n\n        return(\n            <div className=\"gran-total\">\n                { mensaje }\n                <TransitionGroup component=\"span\" className=\"resultado\">\n                    <CSSTransition \n                        classNames=\"resultado\" \n                        key={resultado}\n                        timeout={{enter: 500, exit: 500}}\n                    >\n                        <span>{resultado}</span>\n                    </CSSTransition>\n                </TransitionGroup>\n            </div>\n        );\n    }\n}\n\nexport default Resultado;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Resumen from './Resumen';\nimport Resultado from './Resultado';\nimport {obtenerDiferenciaAnio, calcularMarca, obtenerPlan} from '../helper.js';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      resultado: '',\n      datos: {}\n    };\n    \n  }\n\n  cotizarSeguro = (datos) => {\n    const {marca, year, plan} = datos;\n\n    // Agregar una base de 2000 para el seguro\n\n    let resultado = 2000;\n\n    // Obtener diferencia de años \n\n    const diferenciaAnios = obtenerDiferenciaAnio(year);\n    \n    // por cada año restar 3% al seguro\n\n    resultado -= ((diferenciaAnios * 3) * resultado) / 100;\n\n    // Americano 15% Asiatico 5% Europeo 30% de incremento al valor actual\n    \n    resultado = calcularMarca(marca) * resultado;\n\n    // El plan Básico incrementa el valor en 20% y el completo en 50%\n\n    let incrementoPlan = obtenerPlan(plan);\n\n    // dependiendo del plan incrementar el resultado\n\n    resultado = parseFloat(incrementoPlan * resultado).toFixed(2);\n\n    // crear objeto para datos del auto\n\n    const datosAuto = {\n      marca: marca,\n      plan: plan,\n      year: year\n    }\n\n    // ya tenemos el costo\n\n    this.setState({\n      resultado: resultado,\n      datos: datosAuto\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor\">\n\n        <Header \n          titulo=\"Cotizador de Seguro de Auto\"\n        />\n\n        <div className=\"contenedor-formulario\">\n          <Formulario \n            cotizarSeguro={this.cotizarSeguro}\n          />\n          <Resumen\n            datos={this.state.datos}\n          />\n          <Resultado\n              resultado={ this.state.resultado }\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}